#!/usr/bin/env bash

duration="$1"

if [ -z "$duration" ]; then
  echo "Usage: $0 <duration> (e.g. \"1 day ago\", \"1 week ago\", \"1 month ago\" \"1 year ago\")"
  exit 1
fi

echo "worktime for last ${duration}:"

# Function to format hours and minutes
format_worktime() {
  local hours=$1
  local minutes=$2
  formatted_hours=$(printf "%02d" "$hours")     # Format hours with leading zero if necessary
  formatted_minutes=$(printf "%02d" "$minutes") # Format minutes with leading zero if necessary
  echo "${formatted_hours}hr ${formatted_minutes}min"
}

# Function to convert minutes to hours and minutes
convert_minutes_to_hours() {
  local total_minutes=$1
  hours=$((total_minutes / 60))
  minutes=$((total_minutes % 60))
  echo "$hours $minutes"
}

# Get the reboot times for the last week and extract worktime directly
last reboot -F -s "$(date -d "${duration}" '+%Y-%m-%d %H:%M:%S')" |
  awk '
        function format_worktime(hours, minutes) {
            formatted_hours = sprintf("%02d", hours);
            formatted_minutes = sprintf("%02d", minutes);
            return formatted_hours "hr " formatted_minutes "min";
        }
        function convert_minutes_to_hours(total_minutes, _hours, _minutes) {
            _hours = int(total_minutes / 60);
            _minutes = total_minutes % 60;
            return _hours " " _minutes;
        }
        /reboot/ {
            match($0, /\(([0-9]+):([0-9]{2})\)/, time);
            hours = time[1];
            minutes = time[2];
            date = $5 " " $6 " " $7 " " $9;
            if (!seen[date]) {
                worktime_hours[date] = hours;
                worktime_minutes[date] = minutes;
                seen[date] = 1;
                dates[++count] = date;  # Store dates for sorting
            } else {
                worktime_hours[date] += hours;
                worktime_minutes[date] += minutes;
            }
        }
        END {
            for (i = count; i >= 1; i--) {
                date = dates[i];
                hours = worktime_hours[date];
                minutes = worktime_minutes[date];
                worktime = format_worktime(hours, minutes);
                printf "%s worktime: %s\n", date, worktime;
                total_hours += hours;
                total_minutes += minutes;
            }
            # Convert total minutes to hours and minutes
            total_hours += int(total_minutes / 60);
            total_minutes = total_minutes % 60;
            total_worktime = format_worktime(total_hours, total_minutes);
            printf "Total worktime: %s\n", total_worktime;
        }
    '
